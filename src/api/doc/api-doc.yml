openapi: 3.0.0
info:
  description: This is a sample server model based on koa with JWT authentication.
  version: 1.0.0
  title: NODE API REST MODEL
  contact:
    email: youremail@email.com
servers:
  - url: 'http://localhost:8080/api'
    description: Server model
tags:
  - name: Authentication
    description: Everything about Authentication
  - name: Posts
    description: Everything about Posts
  - name: Users
    description: Everything about Users
paths:
  /auth:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: return jwt Bearer token
        '400':
          $ref: '#/components/responses/BadRequest'
  /posts:
    get:
      tags:
        - Posts
      summary: Get all Posts
      responses:
        '200':
          description: return list of all posts
    post:
      tags:
        - Posts
      summary: Add a new posts to the store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '200':
          description: return created posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/posts/{id}':
    get:
      tags:
        - Posts
      summary: Get a posts with a id
      parameters:
        - name: id
          in: path
          description: Posts ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Return a posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
    put:
      tags:
        - Posts
      summary: Update an existing posts
      parameters:
        - name: id
          in: path
          description: Posts ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posts'
      responses:
        '200':
          description: Return updated posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - Posts
      summary: Delete an existing posts
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      tags:
        - Users
      summary: Get all Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: return list of all users
    post:
      tags:
        - Users
      summary: Add a new user to the store
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: return created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Get a user with a userId
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Return a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update an existing user
      security:
        - bearerAuth: []
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Return updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - Users
      summary: Delete an existing user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
            example:
              error: NotFound
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
            example:
              error: BadRequest
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - message
            example:
              error: PermissionDenied
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Authentication:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - id
        - password
      example:
        email: JohnDoe@gmail.com
        password: password
    Posts:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
      example: null
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
      required:
        - id
        - email
        - password
      example:
        email: user@email.com
        password: password
