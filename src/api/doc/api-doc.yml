openapi: 3.0.0
info:
  description: This is a sample server model based on koa with JWT authentication.
  version: 1.0.0
  title: NODE API REST MODEL
  contact:
    email: youremail@email.com
servers:
  - url: 'http://localhost:8080/api'
    description: Server model
tags:
  - name: Authentication
    description: Everything about Authentication
  - name: Users
    description: Everything about Users
paths:
  /auth:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
            example:
              email: JohnDoe@gmail.com
              password: password
      responses:
        '200':
          description: return jwt Bearer token
          content:
            application/json:
              example:
                token: 'a token contain payload {id, email, admin} of user'
        '400':
          $ref: '#/components/responses/BadRequest'
  /users:
    get:
      tags:
        - Users
      summary: Get all Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: return list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
    post:
      tags:
        - Users
      summary: Add a new user to the store
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: user@email.com
              password: password
      responses:
        '200':
          description: return created user
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Get a user with a userId
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return a user
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Users
      summary: Update an existing user
      security:
        - bearerAuth: []
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: user@email.com
              password: password
      responses:
        '200':
          description: Return updated user
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Users
      summary: Delete an existing user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  responses: &ref_0
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
            example:
              error: NotFound
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
            example:
              error: BadRequest
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - message
            example:
              error: PermissionDenied
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        createdOn:
          type: string
      example:
        id: 5c740a7de95c6ee5b1c00640
        email: JohnDoe@email.com
        createdOn: 2019-02-25T16:32:13.077Z
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas: *ref_0
